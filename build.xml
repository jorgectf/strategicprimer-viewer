<?xml version="1.0" encoding="utf-8" standalone="no"?>
<project default="all" name="SP viewer">
  <target name="all" depends="clean,release" />
  <property file="build.properties" />
  <tstamp />
  <!-- ANT 1.7 is required -->

  <!-- Versioning -->
  <property file="version.properties" />

  <!-- Paths to find necessary files and paths within the repository -->
  <property file="paths.properties" />

  <!-- Paths within the repository. This should just work, so long as the directories exist. -->
  <path id="junit.classpath">
    <!-- These are where these files are located on a Gentoo Linux system;
	     they'll almost certainly be located somewhere else under some
	     other distribution or on some other operating system. But IMO this
	     is better than specifying *version-specific* paths under the
	     Eclipse home directory. -->
    <pathelement location="${junit.jar.path}" />
    <pathelement location="${hamcrest.jar.path}" />
  </path>
  <path id="viewer.classpath">
    <pathelement location="${bin_dir}" />
    <path refid="junit.classpath" />
  </path>


  <!-- Clean targets -->
  <target name="clean">
    <delete dir="${bin_dir}" />
  </target>
  <target depends="clean" name="cleanall">
    <delete dir="${release}" />
    <delete dir="${junit.output.dir}" />
  </target>

  <!-- Target to get the Mercurial revision number, which we use as the micro version. -->
  <target name="get-version">
    <exec executable="/usr/bin/hg" outputproperty="scm.revision.number">
      <arg value="id" />
      <arg value="-n" />
    </exec>
    <exec executable="/usr/bin/hg" outputproperty="scm.revision.id">
      <arg value="id" />
      <arg value="-i" />
    </exec>
    <property name="version-number" value="${major-version-number}.${minor-version-number}.${scm.revision.number}" />
  </target>

  <target name="get-builder">
    <!-- This requires the HgConfig extension, https://bitbucket.org/alu/hgconfig -->
    <exec executable="/usr/bin/hg" outputproperty="scm.builder">
      <arg value="showconfig" />
      <arg value="ui.username" />
    </exec>
  </target>

  <!-- Build targets -->
  <target name="init">
    <mkdir dir="${bin_dir}" />
    <copy includeemptydirs="false" todir="bin">
      <fileset dir="${source_dir}">
        <exclude name="**/*.launch" />
        <exclude name="**/*.ceylon" />
        <exclude name="**/*.java" />
        <exclude name="tables/" />
      </fileset>
    </copy>
  </target>
  <target name="build" depends="init">
    <echo message="${ant.project.name}: ${ant.file}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="bin"
    source="${source}" target="${target}"
    includeantruntime="false">
      <src path="src" />
      <exclude name="tables/" />
      <classpath refid="viewer.classpath" />
    </javac>
  </target>
  
  <!-- Test targets -->
  <target name="test" depends="build">
    <echo message='If Ant fails to find JUnit task on a Gentoo system, run with ANT_TASKS="ant-junit4 jarbundler" in the environment.' />
    <mkdir dir="${junit.output.dir}" />
    <junit fork="yes" printsummary="withOutAndErr" failureproperty="junit.failure">
      <formatter type="xml" />
      <!-- TODO: run all tests, dynamically detected, rather than listing them. -->
      <test name="controller.exploration.TestTableLoader" todir="${junit.output.dir}" />
      <test name="model.exploration.TestExplorationRunner" todir="${junit.output.dir}" />
      <test name="model.map.TestSerialization" todir="${junit.output.dir}" />
      <test name="model.map.TestSubsets" todir="${junit.output.dir}" />
      <test name="model.map.events.TestEventSerialization" todir="${junit.output.dir}" />
      <test name="model.map.fixtures.TestFixtureSerialization" todir="${junit.output.dir}" />
      <test name="model.map.fixtures.TestMoreFixtureSerialization" todir="${junit.output.dir}" />
      <test name="model.viewer.PointIteratorTest" todir="${junit.output.dir}" />
      <classpath refid="viewer.classpath" />
    </junit>
    <fail if="junit.failure" message="Unit test(s) failed. See reports." />
  </target>

  <!-- Release targets -->
  <target name="viewer-${version-number}.jar" depends="test,get-builder,get-version">
    <jar destfile="${release}/viewer-${version-number}.jar"
    filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Main-Class"
        value="controller.map.drivers.ViewerStart" />
        <attribute name="Class-Path" value="." />
	<attribute name="Built-By" value="${scm.builder}" />
	<attribute name="Built-On" value="${TODAY}" />
	<attribute name="Built-At" value="${TSTAMP}" />
	<attribute name="Mercurial-Revision" value="${scm.revision.id}" />
      </manifest>
      <fileset dir="${project_home}/bin" />
    </jar>
  </target>
  <taskdef name="launch4j"
    classname="net.sf.launch4j.ant.Launch4jTask"
    classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
  <target name="viewer-${version-number}.exe" depends="viewer-${version-number}.jar">
    <launch4j configFile="${project_home}/launch4j.cfg.xml"
      outfile="${release}/viewer-${version-number}.exe" jar="${release}/viewer-${version-number}.jar" />
  </target>
  <taskdef name="jarbundler"
    classname="net.sourceforge.jarbundler.JarBundler" />
  <target name="viewer-${version-number}.app" depends="viewer-${version-number}.jar">
    <jarbundler dir="${release}" name="viewer-${version-number}"
      mainclass="controller.map.drivers.ViewerStart"
      jar="${release}/viewer-${version-number}.jar" />
    <symlink link="${release}/viewer-${version-number}.app/Contents/MacOS/JavaApplicationStub"
      resource="/System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub" />
  </target>
  <target name="viewer-${version-number}.app.tbz2" depends="viewer-${version-number}.app">
    <tar destfile="${release}/viewer-${version-number}.app.tbz2" compression="bzip2">
      <tarfileset dir="${release}">
        <include name="viewer-${version-number}.app/**" />
      </tarfileset>
    </tar>
  </target>
  <target name="release"
    depends="viewer-${version-number}.app.tbz2,viewer-${version-number}.exe,viewer-${version-number}.jar" />
</project>
