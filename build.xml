<?xml version="1.0" encoding="utf-8" standalone="no"?>
<project default="all" name="SP viewer" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
  <target name="all" depends="clean,release" />
  <property file="build.properties" />
  <tstamp />
  <!-- ANT 1.7 is required -->

  <!-- Use ant-contrib, for the 'for' task and perhaps others -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <!-- Versioning -->
  <property file="version.properties" />

  <!-- Paths to find necessary files and paths within the repository -->
  <property file="paths.local.properties" />
  <property file="paths.properties" />

  <!-- Paths within the repository. This should just work, so long
       as the directories exist. -->
  <path id="junit.classpath">
    <!-- See comment in paths.properties. -->
    <pathelement location="${junit.jar.path}" />
    <pathelement location="${hamcrest.jar.path}" />
    <pathelement location="${windowmenu.jar.path}" />
  </path>
  <path id="viewer.classpath">
    <pathelement location="${bin_dir}" />
    <path refid="junit.classpath" />
    <!-- See comment in paths.properties -->
    <pathelement location="${nullness.jar.path}" />
    <pathelement location="${windowmenu.jar.path}" />
  </path>


  <!-- Clean targets -->
  <target name="clean">
    <delete dir="${bin_dir}" />
    <delete>
      <fileset dir="${basedir}" includes="icon_*px.png" />
      <fileset dir="${basedir}" includes="icon.ic*" />
    </delete>
  </target>
  <target depends="clean" name="cleanall">
    <delete dir="${release}" />
    <delete dir="${junit.output.dir}" />
    <delete dir="${javadoc_dir}" />
  </target>

  <target name="get-builder">
    <exec executable="/usr/bin/git" outputproperty="scm.builder.username">
        <arg value="config" />
    <arg value="--get" />
    <arg value="user.name" />
    </exec>
    <exec executable="/usr/bin/git" outputproperty="scm.builder.email">
        <arg value="config" />
    <arg value="--get" />
    <arg value="user.email" />
    </exec>
    <property name="scm.builder"
              value="${scm.builder.username} &lt;${scm.builder.email}&gt;" />
    <echo message="${scm.builder}" />
  </target>

  <!-- Build targets -->
  <target name="init">
    <mkdir dir="${bin_dir}" />
    <copy includeemptydirs="false" todir="bin">
      <fileset dir="${source_dir}">
        <exclude name="**/*.launch" />
        <exclude name="**/*.ceylon" />
        <exclude name="**/*.java" />
        <exclude name="tables/" />
      </fileset>
    </copy>
  </target>
  <target name="build" depends="init">
    <echo message="${ant.project.name}: ${ant.file}" />
    <echo>${toString:viewer.classpath}</echo>
    <exec executable="sh"><arg value="-c" />
      <arg value="for f in `echo ${toString:viewer.classpath} | tr ':' '\n'`;
        do test -e $f || echo WARNING: Classpath element $f 	does not exist;done" />
    </exec>
    <javac debug="true" debuglevel="${debuglevel}" destdir="bin"
    source="${source}" target="${target}"
    includeantruntime="false">
      <src path="src" />
      <exclude name="tables/" />
      <classpath refid="viewer.classpath" />
    </javac>
  </target>
  <target name="doc" depends="init">
    <javadoc sourcepath="${source_dir}" defaultexcludes="yes" destdir="${javadoc_dir}"
             author="true">
      <arg value="-notimestamp" />
      <tag name="todo" scope="all" description="To do:"/>
      <tag name="fixme" scope="all" description="FIXME:" />
      <classpath refid="viewer.classpath" />
    </javadoc>
  </target>
  
  <!-- Test targets -->
  <target name="test" depends="build">
    <echo message='If Ant fails to find JUnit task on a Gentoo system,' />
    <echo message='run with ANT_TASKS="ant-junit4 jarbundler" in the environment.' />
    <mkdir dir="${junit.output.dir}" />
    <junit fork="yes" failureproperty="junit.failure">
      <formatter type="plain" />
      <formatter type="brief" usefile="false" />
      <!-- TODO: run all tests, dynamically detected, rather than listing them. -->
      <!-- We can do this once ant 1.9.3 is in our CI; see
          http://stackoverflow.com/a/25148876 -->
      <test name="controller.exploration.TestTableLoader" todir="${junit.output.dir}" />
      <test name="controller.map.misc.TestCLIHelper" todir="${junit.output.dir}" />
      <test name="model.exploration.old.TestExplorationRunner"
            todir="${junit.output.dir}" />
      <test name="model.map.TestSerialization" todir="${junit.output.dir}" />
      <test name="model.map.TestSubsets" todir="${junit.output.dir}" />
      <test name="model.map.TestEventSerialization" todir="${junit.output.dir}" />
      <test name="model.map.fixtures.towns.TestTownSerialization"
            todir="${junit.output.dir}" />
      <test name="model.map.fixtures.towns.TestVillageSerialization"
            todir="${junit.output.dir}" />
      <test name="model.map.fixtures.resources.TestStoneSerialization"
            todir="${junit.output.dir}" />
      <test name="model.map.fixtures.TestFixtureSerialization"
            todir="${junit.output.dir}" />
      <test name="model.map.fixtures.TestMoreFixtureSerialization"
            todir="${junit.output.dir}" />
      <test name="model.viewer.PointIteratorTest" todir="${junit.output.dir}" />
      <test name="model.workermgmt.TestWorkerModel" todir="${junit.output.dir}" />
      <test name="controller.map.converter.TestConverter" todir="${junit.output.dir}" />
      <test name="model.map.fixtures.mobile.worker.TestProxyWorker"
            todir="${junit.output.dir}" />
      <test name="model.exploration.TestDirection" todir="${junit.output.dir}" />
      <test name="controller.map.misc.TestTownComparator" todir="${junit.output.dir}" />
      <test name="controller.map.misc.TestFileHandling" todir="${junit.output.dir}" />
      <classpath refid="viewer.classpath" />
    </junit>
    <fail if="junit.failure" message="Unit test(s) failed. See reports." />
  </target>

  <!-- Targets to run static analysis. -->
  <target name="check" depends="build">
    <echo message='If Ant fails to find static-analysis tasks on a Gentoo system,' />
    <echo message='run with ANT_TASKS="checkstyle" in the environment.' />
    <cs:checkstyle config="checkstyle.xml">
      <fileset dir="src" includes="**/*.java" />
      <formatter type="plain" />
    </cs:checkstyle>
  </target>

  <!-- Release-related tasks. -->
  <taskdef name="launch4j"
    classname="net.sf.launch4j.ant.Launch4jTask"
    classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
  <taskdef name="jarbundler"
    classname="com.ultramixer.jarbundler.JarBundler" />

  <!-- Release targets -->
  <target name="jar" depends="test,get-builder">
    <jar destfile="${release}/${basename}.jar" level="9"
    filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Class-Path" value="." />
    <attribute name="Built-By" value="${scm.builder}" />
    <attribute name="Built-On" value="${TODAY}" />
    <attribute name="Built-At" value="${TSTAMP}" />
    <attribute name="Git-Tag" value="${micro-version-number}" />
      </manifest>
      <fileset dir="${project_home}/bin" />
      <zipfileset excludes="META-INF/**/*" src="${windowmenu.jar.path}" />
    </jar>
  </target>
  <target name="icon">
    <for list="512,256,128,64,48,32,16" param="resolution">
      <sequential>
          <exec executable="${convert.path}" dir="${basedir}">
          <arg value="src/images/icon.png" />
      <arg value="-adaptive-resize" />
      <arg value="@{resolution}x@{resolution}" />
      <arg value="icon_@{resolution}px.png" />
        </exec>
      </sequential>
    </for>
  </target>
  <target name="exe" depends="jar,icon">
      <exec executable="${icotool.path}" dir="${basedir}">
      <arg value="-o" />
      <arg value="icon.ico" />
      <arg value="--create" />
      <arg value="icon_64px.png" />
      <arg value="icon_32px.png" />
      <arg value="icon_16px.png" />
    </exec>
    <launch4j configFile="${project_home}/launch4j.cfg.xml"
      outfile="${release}/${basename}.exe" jar="${release}/${basename}.jar" />
  </target>
  <target name="app" depends="jar,icon">
      <exec executable="${png2icns.path}" dir="${basedir}">
      <arg value="icon.icns" />
      <arg value="icon_512px.png" />
      <arg value="icon_256px.png" />
      <arg value="icon_128px.png" />
      <arg value="icon_48px.png" />
      <arg value="icon_32px.png" />
      <arg value="icon_16px.png" />
    </exec>
    <copy file="${release}/${basename}.jar" tofile="${release}/${shortname}.jar" />
    <jarbundler dir="${release}" name="${basename}" mainclass="${main-class}"
      jar="${release}/${shortname}.jar" version="${version-number}"
      shortname="SPHelpers" stubfile="${stub-script-path}"
      icon="icon.icns" useJavaXKey="true" />
    <tar destfile="${release}/${basename}.app.tbz2" compression="bzip2">
      <tarfileset dir="${release}">
        <include name="${basename}.app/**" />
      </tarfileset>
    </tar>
    <delete file="${release}/${shortname}.jar" />
  </target>
  <target name="dmg" depends="app">
    <exec executable="${mkisofs.path}" dir="${release}/${basename}.app/">
      <arg value="-V" />
      <arg value="${appname}" />
      <arg value="-no-pad" />
      <arg value="-r" />
      <arg value="-hfs" />
      <arg line="-o ../${basename}.dmg" />
      <arg value="." />
    </exec>
    <delete dir="${release}/${basename}.app" />
  </target>
  <target name="dist" depends="build,doc">
    <tar destfile="${release}/${basename}.tbz2" compression="bzip2">
      <tarfileset dir="${project_home}" prefix="${basename}">
        <include name="*.properties" />
    <include name="build.xml" />
    <include name=".checkstyle" />
    <include name=".classpath" />
    <include name=".lint4jprefs" />
    <include name=".pmd" />
    <include name=".project" />
    <include name="checkstyle.xml" />
    <include name="launch4j.cfg.xml" />
      </tarfileset>
      <tarfileset dir="${source_dir}" prefix="${basename}/src">
        <include name="**" />
      </tarfileset>
      <tarfileset dir="${bin_dir}" prefix="${basename}/bin">
        <include name="**" />
      </tarfileset>
      <tarfileset dir="${javadoc_dir}" prefix="${basename}/javadocs">
        <include name="**" />
      </tarfileset>
    </tar>
  </target>
  <target name="release"
    depends="app,exe,jar,dmg,dist" />
</project>
