package controller.map.simplexml.node;

import model.map.PlayerCollection;
import model.map.fixtures.resources.Grove;
import util.EqualsAny;
import util.Warning;
import controller.map.MissingParameterException;
import controller.map.SPFormatException;
import controller.map.misc.IDFactory;

/**
 * A Node to produce a Grove.
 *
 * @author Jonathan Lovelace
 * @deprecated Replaced by ReaderNG.
 */
@Deprecated
public class GroveNode extends AbstractFixtureNode<Grove> {
	/**
	 * The former, deprecated, name of the parameter telling what kind of trees.
	 */
	private static final String OLD_KIND_PARAM = "tree";
	/**
	 * The name of the parameter telling whether this is a wild grove or orchard
	 * or a cultivated one.
	 */
	private static final String WILD_PARAM = "wild";
	/**
	 * The name of the parameter (generated by the factory) that tells us
	 * whether this is a grove or an orchard.
	 */
	private static final String TAG_PARAM = "tag";
	/**
	 * The name of the property saying what kind of trees.
	 */
	private static final String KIND_PROPERTY = "kind";

	/**
	 * Constructor.
	 */
	public GroveNode() {
		super(Grove.class);
	}

	/**
	 * @param players ignored
	 * @param warner a Warning instance to use for warnings
	 * @return the Grove this represents
	 * @throws SPFormatException if missing a required property that should be
	 *         generated by the factory
	 */
	@Override
	public Grove produce(final PlayerCollection players, final Warning warner)
			throws SPFormatException {
		final Grove fix = new Grove("orchard".equals(getProperty(TAG_PARAM)),
				Boolean.parseBoolean(getProperty(WILD_PARAM)),
				getProperty(KIND_PROPERTY),
				Integer.parseInt(getProperty("id")), getProperty("file"));
		return fix;
	}

	/**
	 * @param property the name of a property
	 * @return whether this kind of node can use the property
	 */
	@Override
	public boolean canUse(final String property) {
		return EqualsAny.equalsAny(property, TAG_PARAM, WILD_PARAM,
				KIND_PROPERTY, OLD_KIND_PARAM, "id");
	}

	/**
	 * Check whether the Node's data is valid. A Grove is valid if it has no
	 * children and "tag" (should be generated by the factory, not in the XML),
	 * "wild", and "tree" properties.
	 *
	 * @param warner a Warning instance to use for warnings
	 * @param idFactory the factory to use to register ID numbers and generate
	 *        new ones as needed
	 * @throws SPFormatException if the data is invalid
	 */
	@Override
	public void checkNode(final Warning warner, final IDFactory idFactory)
			throws SPFormatException {
		try {
			demandProperty("grove or orchard", TAG_PARAM, warner, false, false);
		} catch (final MissingParameterException except) {
			// The NodeFactory is supposed to create the 'tag' property; if it's
			// not there, something is *very* wrong.
			throw new IllegalStateException(except);
		}
		forbidChildren(getProperty(TAG_PARAM));
		demandProperty(getProperty(TAG_PARAM), WILD_PARAM, warner, false, false);
		handleDeprecatedProperty(getProperty(TAG_PARAM), KIND_PROPERTY,
				OLD_KIND_PARAM, warner, true, false);
		registerOrCreateID(getProperty(TAG_PARAM), idFactory, warner);
	}

	/**
	 * @return a String representation of the node
	 */
	@Override
	public String toString() {
		return "GroveNode";
	}
}
