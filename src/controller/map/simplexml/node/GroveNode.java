package controller.map.simplexml.node;

import model.map.PlayerCollection;
import model.map.fixtures.Grove;
import util.EqualsAny;
import util.Warning;
import controller.map.SPFormatException;

/**
 * A Node to produce a Grove.
 * @author Jonathan Lovelace
 */
public class GroveNode extends AbstractFixtureNode<Grove> {
	/**
	 * The name of the property saying what kind of trees.
	 */
	private static final String KIND_PROPERTY = "kind";
	/**
	 * Constructor.
	 */
	public GroveNode() {
		super(Grove.class);
	}
	/**
	 * @param players ignored
	 * @return the Grove this represents
	 * @throws SPFormatException if missing a required property that should be generated by the factory
	 */
	@Override
	public Grove produce(final PlayerCollection players) throws SPFormatException {
		return new Grove("orchard".equals(getProperty("tag")),
				Boolean.parseBoolean(getProperty("wild")), getProperty(KIND_PROPERTY));
	}
	/**
	 * @param property the name of a property
	 * @return whether this kind of node can use the property
	 */
	@Override
	public boolean canUse(final String property) {
		return EqualsAny.equalsAny(property, "tag", "wild", KIND_PROPERTY, "tree");
	}
	/**
	 * Check whether the Node's data is valid. A Grove is valid if it has no
	 * children and "tag" (should be generated by the factory, not in the XML),
	 * "wild", and "tree" properties.
	 * @param warner a Warning instance to use for warnings
	 * @throws SPFormatException if the data is invalid
	 */
	@Override
	public void checkNode(final Warning warner) throws SPFormatException {
		if (iterator().hasNext()) {
			throw new SPFormatException(
					"Groves and orchards shouldn't have children", getLine());
		} else if (hasProperty("tag")) {
			if (hasProperty("wild")) {
				if (!hasProperty(KIND_PROPERTY)) {
					if (hasProperty("tree")) {
						warner.warn(new SPFormatException(
								"Using \"tree\" property for the kind of tree is deprecated; use \"kind\" instead",
								getLine()));
						addProperty(KIND_PROPERTY, getProperty("tree"), warner);
					} else {
						throw new SPFormatException(
								"Groves and orchards must have \"wild\" and \"kind\" properties",
								getLine());
					}
				}
			} else {
				throw new SPFormatException(
						"Groves and orchards must have \"wild\" and \"kind\" properties",
						getLine());
			}
		} else {
			throw new SPFormatException(
					"The NodeFactory should have generated a \"tag\" property to tell whether this is a grove or an orchard",
					getLine());
		}
	}
	/**
	 * @return a String representation of the node
	 */
	@Override
	public String toString() {
		return "GroveNode";
	}
}
