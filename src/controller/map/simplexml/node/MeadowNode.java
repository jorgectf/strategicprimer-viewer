package controller.map.simplexml.node;

import model.map.PlayerCollection;
import model.map.fixtures.Meadow;
import util.EqualsAny;
import util.Warning;
import controller.map.MissingParameterException;
import controller.map.SPFormatException;
import controller.map.UnwantedChildException;
/**
 * A Node to produce a Meadow.
 * @author Jonathan Lovelace
 * 
 * FIXME: Groves have "wild", meadows have "cultivated".
 *
 */
public class MeadowNode extends AbstractFixtureNode<Meadow> {
	/**
	 * Constructor.
	 */
	public MeadowNode() {
		super(Meadow.class);
	}
	/**
	 * Produce the Node.
	 * @param players ignored
	 * @param warner a Warning instance to use for warnings
	 * @return the Meadow this represents
	 * @throws SPFormatException if a required attribute is missing.
	 */
	@Override
	public Meadow produce(final PlayerCollection players, final Warning warner) throws SPFormatException {
		return new Meadow(getProperty("kind"),
				"field".equals(getProperty("tag")),
				Boolean.parseBoolean(getProperty("cultivated")));
	}
	/**
	 * @param property the name of a property
	 * @return whether this kind of node can use the property
	 */
	@Override
	public boolean canUse(final String property) {
		return EqualsAny.equalsAny(property, "kind", "tag", "cultivated");
	}
	
	/**
	 * Check whether the Node's data is valid. A Meadow is valid if it has no
	 * children and "tag" (should be generated by the factory, not in the XML),
	 * "kind", and "cultivated" properties.
	 * 
	 * @param warner
	 *            a Warning instance to use for warnings
	 * @throws SPFormatException
	 *             on invalid data
	 */
	@Override
	public void checkNode(final Warning warner) throws SPFormatException {
		if (iterator().hasNext()) {
			// FIXME: This should go after we've ensured that we have a 'tag'
			// property.
			throw new UnwantedChildException(getProperty("tag"), iterator().next()
					.toString(), getLine());
		} else if (hasProperty("tag")) {
			if (!hasProperty("cultivated")) {
				throw new MissingParameterException(getProperty("tag"),
						"cultivated", getLine());
			} else if (!hasProperty("kind")) {
				throw new MissingParameterException(getProperty("tag"), "kind",
						getLine());
			}
		} else {
			// The 'tag' property is supposed to be added by the NodeFactory; if
			// it isn't present, something is *very* wrong.
			throw new IllegalStateException(new MissingParameterException(
					"meadow or field", "tag", getLine()));
		}
	}
	/**
	 * @return a String representation of the Node
	 */
	@Override
	public String toString() {
		return "MeadowNode";
	}
}
